package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"github.com/rs/cors"

	greetv1 "github.com/takmatsukawa/tweakpane-demo/internal/gen/greet/v1"        // generated by protoc-gen-go
	"github.com/takmatsukawa/tweakpane-demo/internal/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
	todov1 "github.com/takmatsukawa/tweakpane-demo/internal/gen/todo/v1"          // generated by protoc-gen-go
	"github.com/takmatsukawa/tweakpane-demo/internal/gen/todo/v1/todov1connect"

	"time"

	"github.com/takmatsukawa/tweakpane-demo/internal/app"
)

type greetServer struct{}

func (s *greetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *greetServer) GreetServerStream(
	ctx context.Context,
	req *connect.Request[greetv1.GreetServerStreamRequest],
	stream *connect.ServerStream[greetv1.GreetServerStreamResponse],
) error {
	for i := 0; ; i++ {
		if err := stream.Send(&greetv1.GreetServerStreamResponse{
			Greeting: fmt.Sprintf("[%d] Hello, %s!", i, req.Msg.Name),
		}); err != nil {
			return err
		}
		time.Sleep(time.Second * 1)
	}
}

type todoServer struct{}

func (s *todoServer) TodoList(
	ctx context.Context,
	req *connect.Request[todov1.TodoListRequest],
) (*connect.Response[todov1.TodoListResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&todov1.TodoListResponse{
		Todos: []*todov1.Todo{
			{
				Title: "Todo 1",
			},
		},
	})
	res.Header().Set("Todo-Version", "v1")
	return res, nil
}

func main() {
	_ = app.New()
	// app.

	mux := http.NewServeMux()
	mux.Handle(greetv1connect.NewGreetServiceHandler(&greetServer{}))
	mux.Handle(todov1connect.NewTodoServiceHandler(&todoServer{}))

	corsHandler := cors.New(cors.Options{
		AllowedMethods: []string{
			http.MethodGet,
			http.MethodPost,
		},
		AllowedOrigins: []string{"*"},
		AllowedHeaders: []string{
			"Accept-Encoding",
			"Content-Encoding",
			"Content-Type",
			"Connect-Protocol-Version",
			"Connect-Timeout-Ms",
			"Connect-Accept-Encoding",  // Unused in web browsers, but added for future-proofing
			"Connect-Content-Encoding", // Unused in web browsers, but added for future-proofing
			"Grpc-Timeout",             // Used for gRPC-web
			"X-Grpc-Web",               // Used for gRPC-web
			"X-User-Agent",             // Used for gRPC-web
		},
		ExposedHeaders: []string{
			"Content-Encoding",         // Unused in web browsers, but added for future-proofing
			"Connect-Content-Encoding", // Unused in web browsers, but added for future-proofing
			"Grpc-Status",              // Required for gRPC-web
			"Grpc-Message",             // Required for gRPC-web
		},
	})

	handler := corsHandler.Handler(mux)

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		// h2c.NewHandler(mux, &http2.Server{}),
		handler,
	)
}
